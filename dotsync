#!/usr/bin/env ysh

# BUG: for now environment variables are mostly loaded in fish, so in order to use them
# I need to find a shell agnostic way for loading environment variables.

const dotPath = "$(realpath $0 | xargs dirname)"

const XDG_CONFIG_HOME = ${XDG_CONFIG_HOME:-'~/.config'}
const XDG_STATE_HOME = ${XDG_STATE_HOME:-'~/.local/state'}
const XDG_DATA_HOME = ${XDG_DATA_HOME:-'~/.local/share'}

proc ensurePacman(package) {
  echo "Ensuring package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    sudo pacman -S --noconfirm $package
  }
}

proc ensureAUR(package) {
  echo "Ensuring AUR package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    var targetPath = "/tmp/dot_tmp/AUR/$package"
    rm -rf $targetPath
    mkdir -p $targetPath
    git clone https://aur.archlinux.org/${package}.git $targetPath
    cd $targetPath {
      makepkg -si --noconfirm
    }
  }
}

proc syncPkgListWithYay() {
  yay -S --needed --noconfirm - < ./packages/pkglist.txt
}

proc dotsBash() {
  mkdir -p "$XDG_STATE_HOME"/bash
}

proc dotsBase() {
  echo 'Setting up base'
  ln -sfnv $dotPath/bin ~/Binaries
  ln -sfnv $dotPath/dots/fish $XDG_CONFIG_HOME/fish
  dotsBash
  ln -sfnv $dotPath/dots/git $XDG_CONFIG_HOME/git
  ln -sfnv $dotPath/dots/readline $XDG_CONFIG_HOME/readline
  ln -sfnv $dotPath/dots/nvim $XDG_CONFIG_HOME/nvim
}

proc dotsKitty() {
  ln -sfnv $dotPath/dots/kitty $XDG_CONFIG_HOME/kitty
}

proc dotsThorium() {
  mkdir -p ~/Documents/credential/thorium
  ln -sfnv ~/Documents/credential/thorium $XDG_CONFIG_HOME/thorium
  ln -sfnv $dotPath/dots/electron/thorium-flags.conf $XDG_CONFIG_HOME/thorium-flags.conf
}

proc dotsDe() {
  echo 'Setting up DE'
  ln -sfnv $dotPath/dots/xdg/mimeapps.list $XDG_CONFIG_HOME/mimeapps.list
  ln -sfnv $dotPath/dots/hyprland $XDG_CONFIG_HOME/hypr
  ln -sfnv $dotPath/dots/waybar $XDG_CONFIG_HOME/waybar
  ln -sfnv $dotPath/dots/mako $XDG_CONFIG_HOME/mako
  ln -sfnv $dotPath/dots/tofi $XDG_CONFIG_HOME/tofi
  ln -sfnv $dotPath/dots/x11  $XDG_CONFIG_HOME/x11
  ln -sfnv $dotPath/dots/applications $XDG_DATA_HOME/applications
  # desktop-file-install --dir=$HOME/.local/share/applications ./dots/applications/*
  dotsKitty
  # dotsMercury
  dotsThorium
}

proc dotsAria2() {
  var aria2Config = "$XDG_CONFIG_HOME/aria2"
  if ! test -d $aria2Config {
    git clone https://github.com/P3TERX/aria2.conf.git $aria2Config
  } else {
    echo "Trying to sync aria2.conf"
    cd $aria2Config {
      git pull
    }
  }
  rm $aria2Config/aria2.conf
  ln -sfnv $dotPath/dots/aria2/aria2.conf $aria2Config/aria2.conf
  touch $aria2Config/aria2.session
  $aria2Config/tracker.sh ./dots/aria2/aria2.conf
}

proc dotsJellyfin() {
  ln -sfnv $dotPath/dots/javsp $XDG_CONFIG_HOME/javsp
}

# TODO: install nix
proc dotsNix() {
  if type nix 2>&1 > /dev/null {
    echo "Nix is installed"
  } else {
    echo "Nix is not installed"
  }
}

proc dotsSteam() {
  mkdir -p $XDG_DATA_HOME/SteamHome
}

proc dotsTools() {
  # TODO: mpd
  echo 'Setting up tools'
  ln -sfnv $dotPath/dots/ranger $XDG_CONFIG_HOME/ranger
  ln -sfnv $dotPath/dots/tealdeer $XDG_CONFIG_HOME/tealdeer
  ln -sfnv $dotPath/dots/bat $XDG_CONFIG_HOME/bat
  ln -sfnv $dotPath/dots/starship/starship.toml $XDG_CONFIG_HOME/starship.toml
  ln -sfnv $dotPath/dots/proxychains ~/.proxychains
  ln -sfnv $dotPath/dots/zathura $XDG_CONFIG_HOME/zathura
  ln -sfnv $dotPath/dots/fcitx5 $XDG_CONFIG_HOME/fcitx5
  ln -sfnv $dotPath/dots/mpv $XDG_CONFIG_HOME/mpv
  ln -sfnv $dotPath/dots/containers $XDG_CONFIG_HOME/containers
  dotsAria2
  dotsJellyfin
  # dotsNix
  dotsSteam
}

proc rustUpInstall(tag) {
  try {
    # TODO: figure out how to redirect errors
    rustup toolchain list | grep $tag > /dev/null
  }
  if (_status !== 0) {
    rustup toolchain install $tag
  }
}
proc dotsRust() {
  ensurePacman rustup
  ensurePacman clang
  ensurePacman mold
  mkdir -p ~/.cargo
  ln -sfnv $dotPath/dots/cargo/config.toml ~/.cargo/config.toml
  rustUpInstall stable
  rustUpInstall nightly
  rustup default stable
}

proc dotsRuby() {
  # Ruby, depends on rust 
  ln -sfnv $dotPath/dots/bundler $XDG_CONFIG_HOME/bundler
  try {
    # frum panics if ruby is already installed
    # TODO: figure out how to redirect errors
    frum --ruby-build-mirror=https://cache.ruby-china.com/pub/ruby install 3.3.0 2> /dev/null
  }
  frum global 3.3.0
}

proc dotsLanguages() {
  echo 'Setting up languages'

  # Python
  ln -sfnv $dotPath/dots/pip $XDG_CONFIG_HOME/pip

  # Clojure
  ln -sfnv $dotPath/dots/clojure $XDG_CONFIG_HOME/clojure
  ln -sfnv $dotPath/dots/lein $XDG_CONFIG_HOME/lein
  ln -sfnv $dotPath/dots/shadow-cljs $XDG_CONFIG_HOME/shadow-cljs

  # JS & TypeScript
  ln -sfnv $dotPath/dots/npm $XDG_CONFIG_HOME/npm
  ln -sfnv $dotPath/dots/bun/bunfig.toml $XDG_CONFIG_HOME/.bunfig.toml

  # Zig 
  # `zvm install` reinstalls everytime, this is better
  yes | zvm use 0.11.0

  # CUDA
  if ! pacman -Qi cuda > /dev/null {
    sudo downgrade \
      --ala-only \
      --ignore always \
      'gcc11=11.3.0-5' 'cuda=11.8.0-1' 'gcc11-libs=11.3.0-5'\
      -- --asdeps --noconfirm
  }
}

proc dotsRclone() {
  sudo mkdir -p /mnt/pikpak
  sudo chown lyh /mnt/pikpak
}

proc dotsServices() {
  echo 'Setting up services'
  ln -sfnv $dotPath/dots/environment.d $XDG_CONFIG_HOME/environment.d
  mkdir -p $XDG_CONFIG_HOME/systemd
  ln -sfnv $dotPath/services $XDG_CONFIG_HOME/systemd/user
  dotsRclone
}

proc dotsEtc() {
  echo 'Setting up etc'
  var etc_configs = split("$(find $dotPath/etc -type f)")
  for source_path in (etc_configs) {
    var relative_path = "$(realpath -s --relative-to=$dotPath/etc $source_path)"
    var destination_path = "/etc/$relative_path"
    sudo rm $destination_path
    sudo ln -sfnv $source_path $destination_path
  }
}

proc addGroups() {
  var groups = join(split("$(cat ./groups.txt)"), ",")
  sudo usermod -aG $groups $(whoami)
}

proc writeMetaData() {
  echo "Writing metadata"
  mkdir -p $XDG_DATA_HOME/dotfiles
  echo $XDG_DATA_HOME
  echo "$dotPath" > $XDG_DATA_HOME/dotfiles/path
}

cd $dotPath {
  ensureAUR yay-bin
  dotsRust # some packages depends on rust
  syncPkgListWithYay

  dotsEtc
  mkdir -p $XDG_CONFIG_HOME
  dotsBase
  dotsDe
  dotsTools
  dotsLanguages
  dotsServices

  addGroups
  writeMetaData
}

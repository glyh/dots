#!/usr/bin/env ysh

# BUG: for now environment variables are mostly loaded in fish, so in order to use them
# I need to find a shell agnostic way for loading environment variables.

const dotPath = "$(realpath $0 | xargs dirname)"

const XDG_CONFIG_HOME = ${XDG_CONFIG_HOME:-'~/.config'}

proc ensurePacman(package) {
  echo "Ensuring package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    sudo pacman -S --noconfirm $package
  }
}

proc ensureAUR(package) {
  echo "Ensuring AUR package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    var targetPath = "/tmp/dot_tmp/AUR/$package"
    rm -rf $targetPath
    mkdir -p $targetPath
    git clone https://aur.archlinux.org/${package}.git $targetPath
    cd $targetPath {
      makepkg -si --noconfirm
    }
  }
}

proc syncPkgListWithYay() {
  yay -S --needed --noconfirm - < ./packages/pkglist.txt
}

proc dotsBase() {
  echo 'Setting up base'
  ln -sfnv $dotPath/bin ~/Binaries
  ln -sfnv $dotPath/dots/fish $XDG_CONFIG_HOME/fish
  ln -sfnv $dotPath/dots/git $XDG_CONFIG_HOME/git
  ln -sfnv $dotPath/dots/readline $XDG_CONFIG_HOME/readline
  ln -sfnv $dotPath/dots/neovim $XDG_CONFIG_HOME/nvim
}

proc dotsKitty() {
  ln -sfnv $dotPath/dots/kitty $XDG_CONFIG_HOME/kitty
}

# Unused
proc dotsMercury() {
  mkdir -p ~/Documents/credential/mercury
  ln -sfnv ~/Documents/credential/mercury ~/.mercury
}


proc dotsThorium() {
  mkdir -p ~/Documents/credential/thorium
  ln -sfnv ~/Documents/credential/thorium $XDG_CONFIG_HOME/thorium
}

proc dotsDe() {
  echo 'Setting up DE'
  ln -sfnv $dotPath/dots/xdg/mimeapps.list $XDG_CONFIG_HOME/mimeapps.list
  ln -sfnv $dotPath/dots/hyprland $XDG_CONFIG_HOME/hypr
  ln -sfnv $dotPath/dots/waybar $XDG_CONFIG_HOME/waybar
  ln -sfnv $dotPath/dots/mako $XDG_CONFIG_HOME/mako
  ln -sfnv $dotPath/dots/tofi $XDG_CONFIG_HOME/tofi
  ln -sfnv $dotPath/dots/x/Xresources ~/.Xresources
  desktop-file-install --dir=$HOME/.local/share/applications ./dots/applications/*
  dotsKitty
  # dotsMercury
  dotsThorium
}

proc dotsAria2() {
  var aria2Config = "$XDG_CONFIG_HOME/aria2"
  if ! test -d $aria2Config {
    git clone https://github.com/P3TERX/aria2.conf.git $aria2Config
  } else {
    echo "Trying to sync aria2.conf"
    cd $aria2Config {
      git pull
    }
  }
  rm $aria2Config/aria2.conf
  ln -sfnv $dotPath/dots/aria2/aria2.conf $aria2Config/aria2.conf
  touch $aria2Config/aria2.session
  $aria2Config/tracker.sh ./dots/aria2/aria2.conf
}

proc dotsJellyfin() {
  ln -sfnv $dotPath/dots/javsp $XDG_CONFIG_HOME/javsp
}

# TODO: install nix
proc dotsNix() {
  if type nix 2>&1 > /dev/null {
    echo "Nix is installed"
  } else {
    echo "Nix is not installed"
  }
}

proc dotsTools() {
  # TODO: mpd
  echo 'Setting up tools'
  ln -sfnv $dotPath/dots/ranger $XDG_CONFIG_HOME/ranger
  ln -sfnv $dotPath/dots/tealdeer $XDG_CONFIG_HOME/tealdeer
  ln -sfnv $dotPath/dots/bat $XDG_CONFIG_HOME/bat
  ln -sfnv $dotPath/dots/starship $XDG_CONFIG_HOME/starship
  ln -sfnv $dotPath/dots/proxychains ~/.proxychains
  dotsAria2
  dotsJellyfin
  ln -sfnv $dotPath/dots/zathura $XDG_CONFIG_HOME/zathura
  ln -sfnv $dotPath/dots/fcitx5 $XDG_CONFIG_HOME/fcitx5
  dotsNix
}

proc dotsMise() {
  ln -sfnv $dotPath/dots/mise $XDG_CONFIG_HOME/mise
  mise install
}

proc dotsAsdf(){
  # osh not compatible with asdf yet 
  # https://github.com/oilshell/oil/issues/428#issuecomment-1986684491
  echo """
    source /opt/asdf-vm/asdf.sh
    asdf plugin add zig https://github.com/asdf-community/asdf-zig.git

    asdf install zig
    asdf install ruby
  """ | sh
  ln -sfnv $dotPath/dots/asdf/tool-versions ~/.tool-versions
}

proc dotsRust() {
  ensurePacman rustup
  ensurePacman clang
  ensurePacman mold
  mkdir -p ~/.cargo
  ln -sfnv $dotPath/dots/cargo/config.toml ~/.cargo/config.toml
  try {
    rustup show active-toolchain | grep stable-x86_64 > /dev/null
  }
  if (_status !== 0) {
    rustup toolchain install stable
  }
  rustup default stable
}

proc dotsLanguages() {
  echo 'Setting up languages'

  # Python
  ln -sfnv $dotPath/dots/pip $XDG_CONFIG_HOME/pip

  # JS & TypeScript
  ln -sfnv $dotPath/dots/npm $XDG_CONFIG_HOME/npm
  ln -sfnv $dotPath/dots/bun/bunfig.toml ~/.bunfig.toml

  # Ruby, depends on rust 
  mkdir -p ~/.bundle
  ln -sfnv $dotPath/dots/bundle/config ~/.bundle/config
  try {
    # frum panics if ruby is already installed
    frum --ruby-build-mirror=https://cache.ruby-china.com/pub/ruby install 3.3.0
  }
  frum global 3.3.0

  # Zig 
  # zvm install reinstalls everytime, this is better
  yes | zvm use 0.11.0
}

proc dotsRclone() {
  sudo mkdir -p /mnt/pikpak
  sudo chown lyh /mnt/pikpak
}

proc dotsServices() {
  echo 'Setting up services'
  mkdir -p $XDG_CONFIG_HOME/systemd
  ln -sfnv $dotPath/services $XDG_CONFIG_HOME/systemd/user
  dotsRclone
}

proc dotsEtc() {
  echo 'Setting up etc'
  var etc_configs = split("$(find $dotPath/etc -type f)")
  for source_path in (etc_configs) {
    var relative_path = "$(realpath -s --relative-to=$dotPath/etc $source_path)"
    var destination_path = "/etc/$relative_path"
    sudo rm $destination_path
    sudo ln -sfnv $source_path $destination_path
  }
}

proc addGroups() {
  var groups = join(split("$(cat ./groups.txt)"), ",")
  sudo usermod -aG $groups $(whoami)
}

cd $dotPath {
  ensureAUR yay-bin
  dotsRust # some packages depends on rust
  syncPkgListWithYay

  dotsEtc
  mkdir -p $XDG_CONFIG_HOME
  dotsBase
  dotsDe
  dotsTools
  dotsLanguages
  dotsServices

  addGroups

  echo "$dotPath" > ~/.where_is_dot
}

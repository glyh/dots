#!/usr/bin/env ysh

const dotPath = "$(realpath $0 | xargs dirname)"

proc ensurePacman(package) {
  echo "Ensuring package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    sudo pacman -S --noconfirm $package
  }
}

proc ensureAUR(package) {
  echo "Ensuring AUR package $package is installed"
  if ! pacman -Qi $package > /dev/null {
    var targetPath = "/tmp/dot_tmp/AUR/$package"
    rm -rf $targetPath
    mkdir -p $targetPath
    git clone https://aur.archlinux.org/${package}.git $targetPath
    cd $targetPath {
      makepkg -si --noconfirm
    }
  }
}

proc syncPkgListWithYay() {
  yay -S --needed --noconfirm - < ./packages/pkglist.txt
}

proc dotsBase() {
  echo 'Setting up base'
  ln -sfnv $dotPath/bin ~/Binaries
  ln -sfnv $dotPath/dots/fish ~/.config/fish
  ln -sfnv $dotPath/dots/git ~/.config/git
  ln -sfnv $dotPath/dots/readline/.inputrc ~/.inputrc
  ln -sfnv $dotPath/dots/neovim ~/.config/nvim

  mkdir -p ~/.local/share/gopass
  ln -sfnv $dotPath/encrypted/gopass/stores ~/.local/share/gopass/stores
  ln -sfnv $dotPath/dots/gopass ~/.config/gopass
}

proc dotsKitty() {
  ln -sfnv $dotPath/dots/kitty ~/.config/kitty
}

proc dotsMercury() {
  var targetPath = "./encrypted/mercury"
  if test -d $targetPath {
    echo "Trying to sync Mercury profile"
    cd $targetPath {
      git pull
    }
  } else {
    git clone git@github.com:glyh/mercury_encrypted.git encrypted/mercury
  }
  if mountpoint ~/.mercury > /dev/null {
    echo "Mercury profile is around mounted, skipping"
  } else {
    mkdir -p ~/.mercury
    rm -rf ~/.mercury/*
    gocryptfs $targetPath/mercury ~/.mercury/ -extpass "gopass show -o mercury_gocryptfs"
  }
}

proc dotsDe() {
  echo 'Setting up DE'
  ln -sfnv $dotPath/dots/xdg/mimeapps.list ~/.config/mimeapps.list
  ln -sfnv $dotPath/dots/hyprland ~/.config/hypr
  ln -sfnv $dotPath/dots/waybar ~/.config/waybar
  ln -sfnv $dotPath/dots/mako ~/.config/mako
  ln -sfnv $dotPath/dots/tofi ~/.config/tofi
  ln -sfnv $dotPath/dots/x/Xresources ~/.Xresources
  desktop-file-install --dir=$HOME/.local/share/applications ./dots/applications/*
  dotsKitty
  dotsMercury
}

proc dotsAria2() {
  if ! test -d ~/.aria2 {
    git clone https://github.com/P3TERX/aria2.conf.git ~/.aria2
  } else {
    echo "Trying to sync aria2.conf"
    cd ~/.aria2 {
      git pull
    }
  }
  rm ~/.aria2/aria2.conf
  ln -sfnv $dotPath/dots/aria2/aria2.conf ~/.aria2/aria2.conf 
  touch ~/.aria2/aria2.session
  ~/.aria2/tracker.sh ./dots/aria2/aria2.conf
}

proc dotsJellyfin() {
  ln -sfnv $dotPath/dots/javsp ~/.config/javsp
}

proc dotsTools() {
  # TODO: mpd
  echo 'Setting up tools'
  ln -sfnv $dotPath/dots/ranger ~/.config/ranger
  ln -sfnv $dotPath/dots/tealdeer ~/.config/tealdeer
  ln -sfnv $dotPath/dots/bat ~/.config/bat
  ln -sfnv $dotPath/dots/starship ~/.config/starship
  ln -sfnv $dotPath/dots/proxychains ~/.proxychains
  dotsAria2
  dotsJellyfin
  ln -sfnv $dotPath/dots/zathura ~/.config/zathura
  ln -sfnv $dotPath/dots/fcitx5 ~/.config/fcitx5
}

proc dotsMise() {
  ln -sfnv $dotPath/dots/mise ~/.config/mise
  mise install
}

proc dotsAsdf(){
  # osh not compatible with asdf yet 
  # https://github.com/oilshell/oil/issues/428#issuecomment-1986684491
  echo """
    source /opt/asdf-vm/asdf.sh
    asdf plugin add zig https://github.com/asdf-community/asdf-zig.git

    asdf install zig
    asdf install ruby
  """ | sh
  ln -sfnv $dotPath/dots/asdf/tool-versions ~/.tool-versions
}

proc dotsRust() {
  ensurePacman rustup
  ensurePacman clang
  ensurePacman mold
  mkdir -p ~/.cargo
  ln -sfnv $dotPath/dots/cargo/config.toml ~/.cargo/config.toml
  try {
    rustup show active-toolchain | grep stable-x86_64 > /dev/null
  }
  if (_status !== 0) {
    rustup toolchain install stable
  }
  rustup default stable
}

proc dotsLanguages() {
  echo 'Setting up languages'

  # Python
  ln -sfnv $dotPath/dots/pip ~/.config/pip

  # TypeScript
  ln -sfnv $dotPath/dots/bun/bunfig.toml ~/.bunfig.toml

  # Ruby, depends on rust 
  mkdir -p ~/.bundle
  ln -sfnv $dotPath/dots/bundle/config ~/.bundle/config
  try {
    # frum panics if ruby is already installed
    frum --ruby-build-mirror=https://cache.ruby-china.com/pub/ruby install 3.3.0
  }
  frum global 3.3.0

  # Zig 
  # zvm install reinstalls everytime, this is better
  yes | zvm use 0.11.0
}

proc dotsServices() {
  echo 'Setting up services'
  mkdir -p ~/.config/systemd
  ln -sfnv $dotPath/services ~/.config/systemd/user
}

proc dotsEtc() {
  echo 'Setting up etc'
  var etc_configs = split("$(find $dotPath/etc -type f)")
  for source_path in (etc_configs) {
    var relative_path = "$(realpath -s --relative-to=$dotPath/etc $source_path)"
    var destination_path = "/etc/$relative_path"
    sudo rm $destination_path
    sudo ln -sfnv $source_path $destination_path
  }
}

proc addGroups() {
  var groups = join(split("$(cat ./groups.txt)"), ",")
  sudo usermod -aG $groups $(whoami)
}

cd $dotPath {
  ensureAUR yay-bin
  dotsRust # some packages depends on rust

  syncPkgListWithYay

  addGroups
  dotsEtc

  mkdir -p ~/.config
  dotsBase
  dotsDe
  dotsTools
  dotsLanguages
  dotsServices

  echo "$dotPath" > ~/.where_is_dot
}
